
            var clprogramdesaturate =  "__kernel void clDesaturate(__global const uchar4* src, __global uchar4* dst, uint width, uint height) { int x = get_global_id(0); int y = get_global_id(1); if (x >= width || y >= height) return; int i = y * width + x;  uchar4 color = src[i];  uchar lum = (uchar)(0.30f * color.x + 0.59f * color.y + 0.11f * color.z); dst[i] = (uchar4)(lum, lum, lum, 255);}";
		
            
              function setupCanvas () {
                try {
                  var canvasImg = document.getElementById("canvasImg");
                  var canvasImgCtx = canvasImg.getContext("2d");
                  var srcImg = document.getElementById("srcimg");
                  canvasImg.width = srcImg.width;
                  canvasImg.height = srcImg.height;
                  canvasImgCtx.drawImage (srcImg, 0, 0, srcImg.width, srcImg.height);
                } catch(e) {
                  document.getElementById("output").innerHTML += "<h3>ERROR:</h3><pre style=\"color:red;\">" + e.message + "</pre>";
                  throw e;
                }
              }

              function loadKernel(id){
                var kernelElement = document.getElementById(id);
                var kernelSource = kernelElement.text;
                if (kernelElement.src != "") {
                    var mHttpReq = new XMLHttpRequest();
                    mHttpReq.open("GET", kernelElement.src, false);
                    mHttpReq.send(null);
                    kernelSource = mHttpReq.responseText;
                } 
                return kernelSource;
              }

              function CL_desaturate () {
              
                // All output is written to element by id "output"
                var output = document.getElementById("output");
                output.innerHTML = "";

                try {

                  // First check if the WebCL extension is installed at all 
                  if (window.WebCL == undefined) {
                    alert("Unfortunately your system does not support WebCL. " +
                          "Make sure that you have both the OpenCL driver " +
                          "and the WebCL browser extension installed.");
                    return false;
                  }

                  // Get pixel data from canvas
                  var canvasImg = document.getElementById("canvasImg");
                  var canvasImgCtx = canvasImg.getContext("2d");
                  var width = canvasImg.width;
                  var height = canvasImg.height;
                  var pixels = canvasImgCtx.getImageData(0, 0, width, height);

                  // Dimm the existing canvas to highlight any errors we might get.
                  // This does not affect the already retrieved pixel data.
                  canvasImgCtx.fillStyle = "rgba(0,0,0,0.7)";
                  canvasImgCtx.fillRect(0, 0, width, height);
                  
                  // Setup WebCL context using the default device of the first available platform
                  var platforms = WebCL.getPlatformIDs();     
                  var ctx = WebCL.createContextFromType ([WebCL.CL_CONTEXT_PLATFORM, platforms[0]],
                                                          WebCL.CL_DEVICE_TYPE_DEFAULT);

                  // Setup buffers
                  var imgSize = width * height;
                  output.innerHTML += "<br>Image size: " + imgSize + " pixels ("
                                   + width + " x " + height + ")";
                  var bufSize = imgSize * 4; // size in bytes
                  output.innerHTML += "<br>Buffer size: " + bufSize + " bytes";
                  
                  var bufIn = ctx.createBuffer (WebCL.CL_MEM_READ_ONLY, bufSize);
                  var bufOut = ctx.createBuffer (WebCL.CL_MEM_WRITE_ONLY, bufSize);

                   // Create and build program
                  var kernelSrc = loadKernel("clProgramDesaturate");
                  var program = ctx.createProgramWithSource(kernelSrc);
                  var devices = ctx.getContextInfo(WebCL.CL_CONTEXT_DEVICES);
                  try {
                    program.buildProgram ([devices[0]], "");
                  } catch(e) {
                    alert ("Failed to build WebCL program. Error "
                           + program.getProgramBuildInfo (devices[0], WebCL.CL_PROGRAM_BUILD_STATUS)
                           + ":  " + program.getProgramBuildInfo (devices[0], WebCL.CL_PROGRAM_BUILD_LOG));
                    throw e;
                  }

                  // Create kernel and set arguments
                  var kernel = program.createKernel ("clDesaturate");
                  kernel.setKernelArg (0, bufIn);
                  kernel.setKernelArg (1, bufOut);
                  kernel.setKernelArg (2, width, WebCL.types.UINT);
                  kernel.setKernelArg (3, height, WebCL.types.UINT);

                  // Create command queue using the first available device
                  var cmdQueue = ctx.createCommandQueue (devices[0], 0);

                  // Write the buffer to OpenCL device memory
                  cmdQueue.enqueueWriteBuffer (bufIn, false, 0, bufSize, pixels.data, []);

                  // Init ND-range 
                  var localWS = [16,4];  
                  var globalWS = [Math.ceil (width / localWS[0]) * localWS[0], 
                                  Math.ceil (height / localWS[1]) * localWS[1]];
                  
                  output.innerHTML += "<br>work group dimensions: " + globalWS.length;
                  for (var i = 0; i < globalWS.length; ++i)
                    output.innerHTML += "<br>global work item size[" + i + "]: " + globalWS[i];
                  for (var i = 0; i < localWS.length; ++i)
                    output.innerHTML += "<br>local work item size[" + i + "]: " + localWS[i];
                  
                  // Execute (enqueue) kernel
                  cmdQueue.enqueueNDRangeKernel(kernel, globalWS.length, [], globalWS, localWS, []);

                  // Read the result buffer from OpenCL device
                  cmdQueue.enqueueReadBuffer (bufOut, false, 0, bufSize, pixels.data, []);
                  cmdQueue.finish (); //Finish all the operations
                  
                  canvasImgCtx.putImageData (pixels, 0, 0);

                  output.innerHTML += "<br>Done.";
                } catch(e) {
                  document.getElementById("output").innerHTML += "<h3>ERROR:</h3><pre style=\"color:red;\">" + e.message + "</pre>";
                  throw e;
                }
              }